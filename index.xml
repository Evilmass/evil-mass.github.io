<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Evilmass</title><link>https://evilmass.github.io/</link><description>About EnjoyIt Theme</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 28 Jul 2023 01:30:54 +0800</lastBuildDate><atom:link href="https://evilmass.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://evilmass.github.io/posts/about/</link><pubDate>Fri, 24 May 2019 17:21:42 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/about/</guid><description></description></item><item><title>树莓派 clash 遭遇大量不明 http connections</title><link>https://evilmass.github.io/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-clash-%E9%81%AD%E9%81%87%E5%A4%A7%E9%87%8F%E4%B8%8D%E6%98%8E-http-connections/</link><pubDate>Fri, 28 Jul 2023 01:30:54 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/%E6%A0%91%E8%8E%93%E6%B4%BE-clash-%E9%81%AD%E9%81%87%E5%A4%A7%E9%87%8F%E4%B8%8D%E6%98%8E-http-connections/</guid><description><![CDATA[今晚登录树莓派发现输入延迟很高，htop 打开一看 clash 占用的内存快拉满了，netstat -anp 发现有很多不明连接。
搜到相关 Issue：请考虑关闭 Allow-Lan，还是那句：任何需要部署到公网的东西都要注意权限（身份验证+端口限制）最小化。
1 2 3 4 5 allow-lan: true authentication: - &#34;&lt;user&gt;:&lt;pass&gt;&#34; external-controller: &#39;127.0.0.1:9090&#39; secret: &#39;&lt;secret&gt;&#39; 还好在树莓派上跑的是备用代理 CloudFlare WARP，要是机场梯子的话 200G 流量一下午就能刷完。
添加相应配置之后就没有不明 IP 连进来了。]]></description></item><item><title>通过找回密码绕过微信在新设备登录的好友验证</title><link>https://evilmass.github.io/posts/%E9%80%9A%E8%BF%87%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E8%A7%84%E9%81%BF%E5%BE%AE%E4%BF%A1%E5%9C%A8%E6%96%B0%E8%AE%BE%E5%A4%87%E7%99%BB%E5%BD%95%E7%9A%84%E5%A5%BD%E5%8F%8B%E9%AA%8C%E8%AF%81/</link><pubDate>Thu, 27 Jul 2023 18:02:01 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/%E9%80%9A%E8%BF%87%E6%89%BE%E5%9B%9E%E5%AF%86%E7%A0%81%E8%A7%84%E9%81%BF%E5%BE%AE%E4%BF%A1%E5%9C%A8%E6%96%B0%E8%AE%BE%E5%A4%87%E7%99%BB%E5%BD%95%E7%9A%84%E5%A5%BD%E5%8F%8B%E9%AA%8C%E8%AF%81/</guid><description>微信是我见过最傻逼的产品。
文章标题已经把整个流程描述完了，如果有便签请顺手记录下微信号和绑定银行卡的后六位，说不定哪天就用上。
即便如此，四个验证步骤（找回密码的短信验证 -&amp;gt; 是否记得微信号 -&amp;gt; 人脸识别 -&amp;gt; 确认短信）有一个填错直接重来，微信依然是我见过最傻逼的产品。</description></item><item><title>huggingface 部署 docker 记录</title><link>https://evilmass.github.io/posts/huggingface-%E9%83%A8%E7%BD%B2-docker-%E7%8E%AF%E5%A2%83/</link><pubDate>Thu, 27 Jul 2023 15:44:23 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/huggingface-%E9%83%A8%E7%BD%B2-docker-%E7%8E%AF%E5%A2%83/</guid><description>继 Heroku、Railway 收费后，能免费使用（好用）的网站托管服务还剩下 Vercel和 Huggingface。
但 Vercel 不支持 docker deployment，huggingface 限制则很少。
unlimited！ 确实良心。
配置文件 官方文档其实很清晰了，这里简单贴一下没有读写权限问题的 FastAPI Server 配置。
README.md 1 2 3 4 5 6 7 8 9 10 11 --- title: Sig emoji: 🐢 colorFrom: green colorTo: pink sdk: docker app_port: 7860 pinned: false --- Check out the configuration reference at https://huggingface.co/docs/hub/spaces-config-reference Dockerfile 利用多级构建缓存减少后续部署时间。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 # build cache FROM python:3.</description></item><item><title>使用 Gotify 推送签到消息</title><link>https://evilmass.github.io/posts/%E4%BD%BF%E7%94%A8-gotify-%E6%8E%A8%E9%80%81%E7%AD%BE%E5%88%B0%E6%B6%88%E6%81%AF/</link><pubDate>Tue, 25 Jul 2023 12:44:41 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/%E4%BD%BF%E7%94%A8-gotify-%E6%8E%A8%E9%80%81%E7%AD%BE%E5%88%B0%E6%B6%88%E6%81%AF/</guid><description><![CDATA[选型 目前在 huggingface 部署了多个签到脚本，由于仓库设置成 Private，想看脚本输出就只能在浏览器请求 log/filename=&lt;filename&gt;&amp;token=&lt;token&gt; 接口。
及时获取签到通知就成了一个新需求，要求如下：
能自建推送服务器。 这部分隐私要求可有可无，单纯是数据在自己手上比较安心。签到日志输出内容： &lt;datetime.now&gt; &lt;sign_platform&gt; &lt;sign_result&gt;，没有任何利用价值。
足够简单。 这个则是针对安卓端的需求，安卓推送需要 FCM（绑定谷歌三件套）必须在后台一直挂着梯子，所以 App 方案反而是能接受的。
那可选的也就不多了，首先排除：WxPusher、Server酱、TelegramBot、QQBot、邮箱。
那就只剩下 pushdeer、Bark、Gotify。
pushdeer 最开始吸引我的是 pushdeer，下载 App 打开后发现 UI 做的还可以。
But emmm，登录进去发现安卓端还没有开发好自建服务器的功能，推送信息下面还带广告，直接弃用。 Bark 针对 Apple 设备推送的效果很好，但是官方没有提供安卓端的 App，目前只有 PushLite 可用，要一直挂着梯子，且 PushLite 界面过于简陋，弃用。
Gotify 官方文档清晰明了，无论是搭建服务端还是使用客户端接收消息都突出一个简单易用还好用。
do one thing，and do well.
服务端 树莓派使用可执行文件 + Nginx 做反向代理。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # &gt; curl -s https://api.]]></description></item><item><title>Playwright 编写签到脚本遇到的问题</title><link>https://evilmass.github.io/posts/playwright-%E7%BC%96%E5%86%99%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 23 Jul 2023 16:28:15 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/playwright-%E7%BC%96%E5%86%99%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description><![CDATA[browser 一行命令完成安装依赖和浏览器。
playwright install --with-deps chromium firefox 万能的 record 模式 参考 [[playwright 五分钟上手指南]]，遇到任何定位问题直接哪里不会点哪里。
1 await page.pause() 官方文档不推荐的写法 参考 Auto-waiting，绝大部分方法都会自动等待页面加载完成才执行相应操作，超过系统默认超时时间（30s）才会报错。
1 2 3 # https://playwright.dev/python/docs/api/class-page#page-wait-for-timeout await page.wait_for_timeout(1000) # DISCOURAGED await page.wait_for_load_state(&#34;networkidle&#34;) # 等待网络加载完成 XPath locator和 CSS locator 也是不推荐的，更直观的写法是使用 Locator 的各种定位 API。
要等待某个元素出现选 is_enabled() | focus() 优于 is_visible()。
is_visible() 在 headless = False 下没有问题，但调试的下切换到其他窗口，is_visible() 就会失去聚焦对象。
多线程 文档确说明 Playwright&rsquo;s API is not thread-safe，issue/623也有人给出多线程的实现，但还是推荐使用 async 完成。
多进程 同上，与其手动处理进程资源（开销），不如直接 async。
多 context &amp; 多 page 文档推荐的写法：Multiple Contexts in a Single Test，通过示例可以看出 playwright 自上而下的资源创建过程：]]></description></item><item><title>playwright 快速上手指南</title><link>https://evilmass.github.io/posts/playwright-%E4%BA%94%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</link><pubDate>Sun, 23 Jul 2023 01:15:31 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/playwright-%E4%BA%94%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</guid><description><![CDATA[本文旨在“快速上手”，所以不会像其他文章一样详细介绍每一个模块，具体用法请根据实际需求翻阅官方文档。
安装 1 2 pip3 install playwright playwright install chromium firefox 调试模式 &amp; 生成代码 自动生成代码：
playwright codegen -o test.py -b chromium 调试模式会自动记录并生成代码。 移动到相应位置显示元素定位代码，填入相关验证信息，点击登录。 右边的调试窗口已经自动生成刚才的登录流程代码（同步）了，将操作部分的代码加 await 改成异步即可。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import asyncio from playwright.async_api import async_playwright async def main(): &#34;&#34;&#34; headless = False，显示界面 slow_mo，模仿用户在一秒内完成每一步操作 &#34;&#34;&#34; async with async_playwright() as p: # 初始化浏览器 browser = await p.]]></description></item><item><title>笔记软件迁移</title><link>https://evilmass.github.io/posts/%E7%AC%94%E8%AE%B0%E8%BD%AF%E4%BB%B6%E8%BF%81%E7%A7%BB/</link><pubDate>Sat, 22 Jul 2023 02:08:12 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/%E7%AC%94%E8%AE%B0%E8%BD%AF%E4%BB%B6%E8%BF%81%E7%A7%BB/</guid><description><![CDATA[理由 OneNote OneNote 的笔记是真正意义上的笔记，分页层级清晰，网页端的根据所选部分裁剪和全文裁剪功能更是一流。但是：
不支持 Markdown，而且微软官方也停止功能更新了。 一旦裁剪的内容多了不定时分类就会很乱，没有进知识体系（自身问题）。 vscode 用 vscode 写博客文章也不顺手：
实时渲染（Live Preview）不理想。段落一长就要往右拖滚动栏。 每次打开 Markdown 文件要么自动打开另一侧的 Preview（简单修改文件又得手动关），要么每次都手动打开。 OneNote 双向同步略麻烦。 插件多了之后启动速度变慢。 所以尝试一下 Obsidian，看看能不能将平时的 信息收集 + 写作流 迁移过来。
基础设置 语言 About -&gt; Language -&gt; 简体中文
字体 雾霭文楷 这字体是真好看。 主题 Things 自用快捷键 默认的小窗预览文件好评，常用且实用。 CMD + 鼠标悬停链接 -&gt; 预览文件 Ctrl + E -&gt; 切换 编辑/预览 模式 Ctrl + O -&gt; 打开最近文件 Ctrl + Shift + F -&gt; 在所有文件内搜索内容 Ctrl + N -&gt; 新建文件 Ctrl + R -&gt; 文本内替换 Ctrl + T -&gt; 类似浏览器的新建页面 Ctrl + [1-9] -&gt; 切换标签页 Ctrl + Alt + = -&gt; 左右分屏 Ctrl + G -&gt; 关系图【不常用】]]></description></item><item><title>在树莓派部署青龙签到平台</title><link>https://evilmass.github.io/posts/checkin/</link><pubDate>Mon, 17 Jul 2023 19:42:12 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/checkin/</guid><description>框架选择 QD 基于 HAR 的定时任务平台，上手简单。但是对于开发自由度来说不够高，也不好处理动态加载的页面。
青龙面板 相对友好的定时任务平台，自带依赖管理（Nodejs、Python、Linux），脚本类则支持 Python3、JavaScript、Shell、Typescript。
部署 1 2 3 4 5 6 7 8 # curl -sSL get.docker.com | sh docker run -dit \ -v $PWD/ql/data:/ql/data \ -p 5700:5700 \ --name qinglong \ --hostname qinglong \ --restart unless-stopped \ whyour/qinglong:debain 坑点：
whyour/qinglong:latest 默认使用 alpine 精简镜像导致很多 python 依赖无法安装 因此选择 whyour/qinglong:debain 镜像。 签到脚本 本来是想用 requests 一把梭的，但是吾爱破解的签到页面用了动态加载 js ，直接访问接口会提示：请开启JavaScript并刷新该页。
想了解三者区别可以看这个：Playwright VS Selenium VS Puppeteer VS Cypress。
当时想着尝试新东西选了 playwright，体验很好，不再需要折腾各种新旧版本的 webdriver。
然后如无意外的出意外了。</description></item><item><title>搭建一个属于自己的在线网盘</title><link>https://evilmass.github.io/posts/oneindex/</link><pubDate>Tue, 27 Jun 2023 12:43:36 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/oneindex/</guid><description><![CDATA[简单记录搭建 onedrive-vercel-index 的过程。
官方文档的搭建流程清晰明了，跟着步骤来就行，唯一问题是官方仓库的 clientID 过期。
参考使用你自己的 client id 与 secret 修改自己 fork 的仓库下 api.config.js
1 2 3 4 5 6 7 module.exports = { // The clientId and clientSecret are used to authenticate the user with Microsoft Graph API using OAuth. You would // not need to change anything here if you can authenticate with your personal Microsoft account with OneDrive International. clientId: &#39;d87bcc39-1750-4ca0-ad54-f8d0efbb2735&#39;, obfuscatedClientSecret: &#39;U2FsdGVkX1830zo3/pFDqaBCVBb37iLw3WnBDWGF9GIB2f4apzv0roemp8Y+iIxI3Ih5ecyukqELQEGzZlYiWg==&#39;, ... } 最后在 vercel dashboard 再设置下自定义域名，完美。]]></description></item></channel></rss>
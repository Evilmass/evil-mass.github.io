<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>playwright - Category - Evilmass</title><link>https://evilmass.github.io/categories/playwright/</link><description>playwright - Category - Evilmass</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 23 Jul 2023 16:28:15 +0800</lastBuildDate><atom:link href="https://evilmass.github.io/categories/playwright/" rel="self" type="application/rss+xml"/><item><title>Playwright 编写签到脚本遇到的问题</title><link>https://evilmass.github.io/posts/playwright-%E7%BC%96%E5%86%99%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Sun, 23 Jul 2023 16:28:15 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/playwright-%E7%BC%96%E5%86%99%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description><![CDATA[browser 一行命令完成安装依赖和浏览器。
playwright install --with-deps chromium firefox 万能的 record 模式 参考 [[playwright 五分钟上手指南]]，遇到任何定位问题直接哪里不会点哪里。
1 await page.pause() 官方文档不推荐的写法 参考 Auto-waiting，绝大部分方法都会自动等待页面加载完成才执行相应操作，超过系统默认超时时间（30s）才会报错。
1 2 3 # https://playwright.dev/python/docs/api/class-page#page-wait-for-timeout await page.wait_for_timeout(1000) # DISCOURAGED await page.wait_for_load_state(&#34;networkidle&#34;) # 等待网络加载完成 XPath locator和 CSS locator 也是不推荐的，更直观的写法是使用 Locator 的各种定位 API。
要等待某个元素出现选 is_enabled() | focus() 优于 is_visible()。
is_visible() 在 headless = False 下没有问题，但调试的下切换到其他窗口，is_visible() 就会失去聚焦对象。
多线程 文档确说明 Playwright&rsquo;s API is not thread-safe，issue/623也有人给出多线程的实现，但还是推荐使用 async 完成。
多进程 同上，与其手动处理进程资源（开销），不如直接 async。
多 context &amp; 多 page 文档推荐的写法：Multiple Contexts in a Single Test，通过示例可以看出 playwright 自上而下的资源创建过程：]]></description></item><item><title>playwright 快速上手指南</title><link>https://evilmass.github.io/posts/playwright-%E4%BA%94%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</link><pubDate>Sun, 23 Jul 2023 01:15:31 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/playwright-%E4%BA%94%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97/</guid><description><![CDATA[本文旨在“快速上手”，所以不会像其他文章一样详细介绍每一个模块，具体用法请根据实际需求翻阅官方文档。
安装 1 2 pip3 install playwright playwright install chromium firefox 调试模式 &amp; 生成代码 自动生成代码：
playwright codegen -o test.py -b chromium 调试模式会自动记录并生成代码。 移动到相应位置显示元素定位代码，填入相关验证信息，点击登录。 右边的调试窗口已经自动生成刚才的登录流程代码（同步）了，将操作部分的代码加 await 改成异步即可。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import asyncio from playwright.async_api import async_playwright async def main(): &#34;&#34;&#34; headless = False，显示界面 slow_mo，模仿用户在一秒内完成每一步操作 &#34;&#34;&#34; async with async_playwright() as p: # 初始化浏览器 browser = await p.]]></description></item></channel></rss>
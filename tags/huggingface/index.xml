<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>huggingface - Tag - Evilmass</title><link>https://evilmass.github.io/tags/huggingface/</link><description>huggingface - Tag - Evilmass</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 27 Jul 2023 15:44:23 +0800</lastBuildDate><atom:link href="https://evilmass.github.io/tags/huggingface/" rel="self" type="application/rss+xml"/><item><title>huggingface 部署 docker 记录</title><link>https://evilmass.github.io/posts/huggingface-%E9%83%A8%E7%BD%B2-docker-%E7%8E%AF%E5%A2%83/</link><pubDate>Thu, 27 Jul 2023 15:44:23 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/huggingface-%E9%83%A8%E7%BD%B2-docker-%E7%8E%AF%E5%A2%83/</guid><description>继 Heroku、Railway 收费后，能免费使用（好用）的网站托管服务还剩下 Vercel和 Huggingface。
但 Vercel 不支持 docker deployment，huggingface 限制则很少。
unlimited！ 确实良心。
配置文件 官方文档其实很清晰了，这里简单贴一下没有读写权限问题的 FastAPI Server 配置。
README.md 1 2 3 4 5 6 7 8 9 10 11 --- title: Sig emoji: 🐢 colorFrom: green colorTo: pink sdk: docker app_port: 7860 pinned: false --- Check out the configuration reference at https://huggingface.co/docs/hub/spaces-config-reference Dockerfile 利用多级构建缓存减少后续部署时间。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 # build cache FROM python:3.</description></item><item><title>为弹幕姬 ReTTS-Cat 插件搭建自定义 tts 引擎</title><link>https://evilmass.github.io/posts/tts_for_danmuji/</link><pubDate>Tue, 23 May 2023 15:10:29 +0800</pubDate><author>Author</author><guid>https://evilmass.github.io/posts/tts_for_danmuji/</guid><description><![CDATA[上回说到，在 huggingface 搭建好 vits server 后，平时直播的弹幕语音靠 bilive_dm 播报，有时候口糊听不清还要切窗口看一眼。然后看到弹幕姬有个自定义 tts 引擎，故考虑接入试试。
Re: TTSCat Re: TTSCat 插件 以及 仓库地址
开幕 archived 问题不大。 插件页面有自定义 tts 引擎 url 的参考格式，怎么简单怎么来（GET）。 在临时目录添加一个 mp3 文件并启动 http 服务器
1 2 3 python3 -m http.server # 自定义引擎地址填入如下 url https://127.0.0.1:8000?text=$TTSTEXT 语音成功播放后感觉 so easy，然后如无意外的出现意外了。
踩坑 fastapi 写个简单 get 接口。
1 2 3 4 5 6 7 8 9 10 @app.get(&#34;/voice&#34;) async def get_audio(token: str, text: str): if token != os.environ.get(&#34;token&#34;): return {&#34;code&#34;: 401} # vits 合成语音，返回二进制文件 audio = load_fast_vits(text) if audio is None: return {&#34;code&#34;: 500} else: return FileResponse(audio) 发送弹幕后什么都没有发生，打开调试模式看看怎么回事。 一切正常，还是什么都没有发生。 在缓存目录下找到 get 获取到的音频文件，直接播放没有问题。]]></description></item></channel></rss>